// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? // ðŸ‘ˆ ADD THIS LINE

  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile fields
  bio        String?
  timezone   String   @default("UTC")
  isOnline   Boolean  @default(false)
  lastSeenAt DateTime @default(now())

  // Study tracking
  totalStudyTime  Int       @default(0) // in minutes
  currentStreak   Int       @default(0) // days
  longestStreak   Int       @default(0) // days
  lastStudyDate   DateTime?
  streakUpdatedAt DateTime  @default(now())

  // Settings
  isProfilePublic      Boolean @default(true)
  allowReports         Boolean @default(true)
  notificationsEnabled Boolean @default(true)

  // Relations
  studySessions    StudySession[]
  roomParticipants RoomParticipant[]
  sentReports      Report[]          @relation("ReportSender")
  receivedReports  Report[]          @relation("ReportTarget")
  userStatus       UserStatus?
  magicLinks       MagicLink[]

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model MagicLink {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@map("magic_links")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model StudyRoom {
  id              String  @id @default(cuid())
  name            String
  description     String?
  isPublic        Boolean @default(true)
  maxParticipants Int     @default(12)

  // Room settings
  allowChat        Boolean @default(true)
  allowScreenShare Boolean @default(true)
  requireCamera    Boolean @default(false)

  // Timer settings
  timerMode       TimerMode @default(POMODORO)
  sessionDuration Int       @default(25) // minutes
  breakDuration   Int       @default(5) // minutes

  // Status
  isActive            Boolean @default(true)
  currentParticipants Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  participants  RoomParticipant[]
  studySessions StudySession[]

  @@map("study_rooms")
}

model RoomParticipant {
  id       String    @id @default(cuid())
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  // Media status
  isVideoOn Boolean @default(true)
  isAudioOn Boolean @default(true)
  isHost    Boolean @default(false)

  // Position for draggable cards
  positionX Float?
  positionY Float?

  // Relations
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  room   StudyRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String

  @@unique([userId, roomId])
  @@map("room_participants")
}

model StudySession {
  id        String    @id @default(cuid())
  startTime DateTime  @default(now())
  endTime   DateTime?
  duration  Int? // in minutes

  // Session data
  pomodoroCount Int    @default(0)
  breakCount    Int    @default(0)
  focusScore    Float? // 0-100 based on activity

  // Relations
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  room   StudyRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String

  @@map("study_sessions")
}

model UserStatus {
  id         String   @id @default(cuid())
  status     String? // Current activity status
  reflection String? // Daily reflection
  mood       Mood? // Current mood
  goals      String[] // Daily goals
  updatedAt  DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@map("user_status")
}

model Report {
  id          String       @id @default(cuid())
  reason      ReportReason
  description String?
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  resolvedAt  DateTime?

  // Relations
  reporter   User   @relation("ReportSender", fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId String
  reported   User   @relation("ReportTarget", fields: [reportedId], references: [id], onDelete: Cascade)
  reportedId String

  @@map("reports")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enums
enum TimerMode {
  POMODORO
  CUSTOM
  STOPWATCH
  NONE
}

enum Mood {
  EXCITED
  FOCUSED
  CALM
  TIRED
  STRESSED
  HAPPY
}

enum ReportReason {
  INAPPROPRIATE_BEHAVIOR
  VULGAR_CONTENT
  HARASSMENT
  SPAM
  DISTURBING_OTHERS
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}
